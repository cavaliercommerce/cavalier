version: "3.7"

volumes:
  local_pgdata: {}
  rabbitmq_data: {}

networks:
  app-network:
    driver: overlay

services:
  storefront:
    networks:
      - app-network
    image: ghcr.io/cavaliercommerce/storefront:latest
    ports:
      - 3000:3000
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        order: start-first
        failure_action: rollback
        delay: 20s
      rollback_config:
        parallelism: 2
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  gateway-service:
    networks:
      - app-network
    image: ghcr.io/cavaliercommerce/gateway-service:latest
    ports:
      - 8080:8080
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/postgres?schema=public&connection_limit=5&pool_timeout=0&connect_timeout=300&sslmode=prefer"
      CONTEXT_PATH: "/"
      PORT: "8080"
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        order: start-first
        failure_action: rollback
        delay: 20s
      rollback_config:
        parallelism: 2
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  postgres:
    networks:
      - app-network
    image: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - local_pgdata:/var/lib/postgresql/data
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager

  rabbitmq:
    image: rabbitmq:4-management
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager
